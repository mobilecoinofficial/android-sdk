apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'
apply from: 'publish.gradle'

protobuf {
    protoc {
        if (osdetector.os == "osx") {
            artifact = deps.network.protoc_osx
        } else {
            artifact = deps.network.protoc
        }
    }
    plugins {
        grpc {
            if (osdetector.os == "osx") {
                artifact = deps.network.grpc_protoc_osx
            } else {
                artifact = deps.network.grpc_protoc
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option "lite" }
            }
            if(task.getName().contains('Grpc')) {
                task.plugins {
                    grpc { option 'lite' }
                }
            }
        }
    }
}

android {
    compileSdkVersion build_versions.compile_sdk
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions 'transport'
    productFlavors {
        http {
            dimension 'transport'
            versionNameSuffix '-http'
        }
        grpc {
            dimension 'transport'
        }
    }
}

sourceSets {
    http {
        java {
        }
    }
    grpc {
        java {
            srcDirs += 'src/grpcTest'
        }
    }
}

task printSourceSetInfo(){
    doLast{
        sourceSets.each { srcSet ->
            println "[" + srcSet.name + "]"
            print "src: " + srcSet.allJava.srcDirs + "\n"
            print "output: " + srcSet.output.classesDirs.files + "\n"
            srcSet.allJava.each {f ->
                println "\tFile: " + f.getName()
            }
        }
    }
}

dependencies {
    // multidex to avoid 64K reference limit
    implementation deps.android.multidex
    // @Nullable, @NonNull annotations
    implementation deps.android.annotation
    implementation deps.android.java_annotation
    // Desugar enables to use Java 8 features without requiring a minimum API level
    // it works by using bytecode transformations during D8/R8 stage (dex + compression)
    coreLibraryDesugaring deps.android.desugar

    // Network
    grpcImplementation deps.network.grpc_okhttp
    grpcImplementation deps.network.grpc_stuf
    grpcImplementation deps.network.grpc_protobuf
    implementation deps.network.protobuf

    // Testing
    testImplementation deps.testing.junit
    testImplementation deps.testing.mockito_core
    androidTestImplementation deps.testing.mockito_android
    androidTestImplementation deps.testing.core
    androidTestImplementation deps.testing.ext_junit
    androidTestImplementation deps.testing.runner
    androidTestImplementation deps.testing.rules
    androidTestImplementation deps.testing.espresso_core
    androidTestImplementation deps.testing.support_rules
    androidTestImplementation deps.testing.okhttp

}
