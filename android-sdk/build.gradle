apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'

def grpcVersion = "1.36.0"
def protobufVersion = "3.10.0"

protobuf {
    protoc {
        if (osdetector.os == "osx") {
            artifact = "com.google.protobuf:protoc:${protobufVersion}:osx-x86_64"
        } else {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
    }
    plugins {
        grpc {
            if (osdetector.os == "osx") {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}:osx-x86_64"
            } else {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
            task.plugins {
                grpc { option 'lite' }
            }
        }
    }
}

android {
    compileSdkVersion 30
    useLibrary 'android.test.runner'

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // multidex to avoid 64K reference limit
    implementation 'com.android.support:multidex:1.0.3'

    // @Nullable, @NonNull annotations
    implementation "androidx.annotation:annotation:1.2.0"
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    // Desugar enables to use Java 8 features without requiring a minimum API level
    // it works by using bytecode transformations during D8/R8 stage (dex + compression)
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // GRPC
    implementation ("io.grpc:grpc-okhttp:${grpcVersion}") {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
    }
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    // Force a specific protobuf-lite version
    implementation ("io.grpc:grpc-protobuf-lite:${grpcVersion}") {
        exclude group: 'com.google.protobuf', module: 'protobuf-javalite'
    }
    implementation "com.google.protobuf:protobuf-javalite:${protobufVersion}"

    // Tests
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    androidTestImplementation 'org.mockito:mockito-android:3.3.3'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}

apply from: 'publish.gradle'
